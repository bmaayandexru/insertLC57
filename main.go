package main

import "fmt"

func main() {
	intervals := [][]int{{1, 5}, {17, 19}}
	//	interval := []int{2, 5}
	interval := []int{2, 4}
	fmt.Println(insert(intervals, interval))
}

func min(x, y int) int {
	if x < y {
		return x
	}
	return y
}

func max(x, y int) int {
	if x > y {
		return x
	}
	return y
}

func insert(intervals [][]int, newInterval []int) [][]int {
	ret := [][]int{}
	// ищем отрезок на или перед которым начинается интервал
	bi := -1
	for i, v := range intervals {
		if newInterval[0] < v[1] {
			bi = i
		}
	}
	// если за всеми
	if bi == -1 {
		// добавить интервал в конец списка и выйти
		return append(intervals, newInterval)
	}
	// если начинается на
	// если заканчивается на отрезке - ничего не делаем выходим
	// ищем отрезок после или на котором заканчивается интервал (2)
	// если перед
	// если заканчивается перед - добавить интервал перед отрезком и выйти
	// если заканчивается на отрезке - скорректировать левую границу отрезка и выйти
	// если заканчивается после отрезка
	// ищем отрезок после или на котором заканчивается интервал (2)
	// (2)
	// если заканчивается на отрезке то правая ганица отрезка становится правой границе интервала

	// в итоговый список попадает всё что до интервала
	// сам интервал с возможно откорректированной правой границей
	// и всё что после интервала
	return ret
}
